{
  "release": {
    "hook": {
      "version": {}
    }
  },
  "README.md": "IyBIb2xvY2hhaW4gQ29tbWFuZCBMaW5lIFRvb2xzCgpbIVtQcm9qZWN0XShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL3Byb2plY3QtaG9sb2NoYWluLWJsdWUuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oaHR0cDovL2hvbG9jaGFpbi5vcmcvKQpbIVtQTV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9wbS13YWZmbGUtYmx1ZS5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUpXShodHRwczovL3dhZmZsZS5pby9ob2xvY2hhaW4vb3JnKQpbIVtDaGF0XShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2NoYXQtY2hhdCUyZWhvbG9jaGFpbiUyZW5ldC1ibHVlLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSldKGh0dHBzOi8vY2hhdC5ob2xvY2hhaW4ub3JnKQoKVGhpcyBjcmF0ZSBpbXBsZW1lbnRzIGEgc2V0IG9mIGRldmVsb3BtZW50IHRvb2xzIGZvciBidWlsZGluZyBhbmQgcnVubmluZyBIb2xvY2hhaW4gRE5BIGZyb20gdGhlIGNvbW1hbmQgbGluZS4KCiMjIEluc3RhbGwKClRoZSByZWNvbW1lbmRlZCBwYXR0ZXJuIGZvciB1c2FnZSBvZiB0aGUgY29tbWFuZCBsaW5lIHRvb2xzIGlzIHRvIGZvbGxvdyB0aGUgaW5zdGFsbGF0aW9uIGluc3RydWN0aW9ucyBmb3VuZCBpbiB0aGUgUXVpY2sgU3RhcnQgZ3VpZGUgb24gdGhlIGRldmVsb3BlciBkb2N1bWVudGF0aW9uLgoKW2h0dHBzOi8vZGV2ZWxvcGVyLmhvbG9jaGFpbi5vcmcvc3RhcnQuaHRtbF0oaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9zdGFydC5odG1sKQoKIyMgVXNhZ2UKClJ1biBgaGMgLS12ZXJzaW9uYCB0byBjaGVjayB5b3VyIHZlcnNpb24gbnVtYmVyLgoKUnVuIGBoYyBoZWxwYCBmb3IgaGVscC4KCnwgQ29tbWFuZCAgIHwgVXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18CnwgaW5pdCAgICAgIHwgSW5pdGlhbGl6ZXMgYSBuZXcgSG9sb2NoYWluIGFwcCBhdCB0aGUgZ2l2ZW4gZGlyZWN0b3J5ICAgICAgICAgICAgICB8CnwgZ2VuZXJhdGUgIHwgR2VuZXJhdGVzIGEgbmV3IFpvbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgcGFja2FnZSAgIHwgQnVpbGRzIHRoZSBjdXJyZW50IEhvbG9jaGFpbiBhcHAgaW50byBhIGAuZG5hLmpzb25gIGZpbGUgICAgICAgICAgICB8CnwgdW5wYWNrICAgIHwgVW5wYWNrcyBhIEhvbG9jaGFpbiBidW5kbGUgaW50byBpdHMgb3JpZ2luYWwgZmlsZSBzeXN0ZW0gc3RydWN0dXJlICB8CnwgdGVzdCAgICAgIHwgUnVucyB0ZXN0cyB3cml0dGVuIGluIHRoZSB0ZXN0IGZvbGRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgcnVuICAgICAgIHwgU3RhcnRzIGEgd2Vic29ja2V0IHNlcnZlciBmb3IgdGhlIGN1cnJlbnQgSG9sb2NoYWluIGFwcCAgICAgICAgICAgICB8Cnwga2V5Z2VuICAgIHwgQ3JlYXRlcyBhIG5ldyBwYXNzcGhyYXNlIGVuY3J5cHRlZCBhZ2VudCBrZXkgYnVuZGxlICAgICAgICAgICAgICAgICB8CgojIyMgaGMgaW5pdCAmIGhjIGdlbmVyYXRlOiBIb3cgVG8gR2V0IFN0YXJ0ZWQgQnVpbGRpbmcgQW4gQXBwCgpUbyByZWFkIGFib3V0IGBoYyBpbml0YCwgdXNlZCBmb3Igc3RhcnRpbmcgYSBuZXcgSG9sb2NoYWluIHByb2plY3QsIHNlZSBbaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9ndWlkZS9sYXRlc3QvbmV3X3Byb2plY3QuaHRtbF0oaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9ndWlkZS9sYXRlc3QvbmV3X3Byb2plY3QuaHRtbCkuCgpUbyByZWFkIGFib3V0IGBoYyBnZW5lcmF0ZWAsIHVzZWQgZm9yIGdlbmVyYXRpbmcgYm9pbGVycGxhdGUgY29kZSBhbmQgZmlsZXMgZm9yIGEgbmV3IFpvbWUsIHNlZSBbaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9ndWlkZS9sYXRlc3Qvem9tZS9hZGRpbmdfYV96b21lLmh0bWxdKGh0dHBzOi8vZGV2ZWxvcGVyLmhvbG9jaGFpbi5vcmcvZ3VpZGUvbGF0ZXN0L3pvbWUvYWRkaW5nX2Ffem9tZS5odG1sKS4KCiMjIyBoYyBwYWNrYWdlOiBVc2luZyBCdWlsdC1pbiBDb21waWxhdGlvbgoKVG8gcmVhZCBhYm91dCBgaGMgcGFja2FnZWAsIHVzZWQgZm9yIGJ1bmRsaW5nIHlvdXIgc291cmNlIGZpbGVzIGludG8gYSBzaW5nbGUgZmlsZSBydW5uYWJsZSBieSBIb2xvY2hhaW4sIHNlZSBbaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9ndWlkZS9sYXRlc3QvcGFja2FnaW5nLmh0bWxdKGh0dHBzOi8vZGV2ZWxvcGVyLmhvbG9jaGFpbi5vcmcvZ3VpZGUvbGF0ZXN0L3BhY2thZ2luZy5odG1sKS4KCiMjIyBoYyB0ZXN0OiBXcml0aW5nIGFuZCBSdW5uaW5nIFRlc3RzCgpUbyByZWFkIGFib3V0IGBoYyB0ZXN0YCwgdXNlZCBmb3IgcnVubmluZyB0ZXN0cyBvdmVyIHlvdXIgc291cmNlIGNvZGUsIHNlZSBbaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9ndWlkZS9sYXRlc3QvaW50cm9fdG9fdGVzdGluZy5odG1sXShodHRwczovL2RldmVsb3Blci5ob2xvY2hhaW4ub3JnL2d1aWRlL2xhdGVzdC9pbnRyb190b190ZXN0aW5nLmh0bWwpLgoKIyMjIGhjIHJ1bjogUnVubmluZyB5b3VyIGFwcGxpY2F0aW9uCgpUbyByZWFkIGFib3V0IGBoYyBydW5gLCB1c2VkIGZvciBzcGlubmluZyB1cCBhIHF1aWNrIGRldmVsb3BtZW50IHZlcnNpb24gb2YgeW91ciBhcHAgd2l0aCBhbiBIVFRQIG9yIFdlYnNvY2tldCBpbnRlcmZhY2UsIHRoYXQgeW91IGNhbiBjb25uZWN0IHRvIGZyb20gYSBVSSwgb3IgYW55IGNsaWVudCwgc2VlIFtodHRwczovL2RldmVsb3Blci5ob2xvY2hhaW4ub3JnL2d1aWRlL2xhdGVzdC9kZXZlbG9wbWVudF9jb25kdWN0b3IuaHRtbF0oaHR0cHM6Ly9kZXZlbG9wZXIuaG9sb2NoYWluLm9yZy9ndWlkZS9sYXRlc3QvZGV2ZWxvcG1lbnRfY29uZHVjdG9yLmh0bWwpLgoKIyMjIGhjIGtleWdlbjogQ3JlYXRlIGFnZW50IGtleSBwYWlyCgpFdmVyeSBhZ2VudCBpcyByZXByZXNlbnRlZCBieSBhIHByaXZhdGUvcHVibGljIGtleSBwYWlyLCB3aGljaCBhcmUgdXNlZCB0byBhdXRob3Igc291cmNlIGNoYWlucy4KVGhpcyBjb21tYW5kIGNyZWF0ZXMgYSBuZXcga2V5IHBhaXIgYnkgYXNraW5nIGZvciBhIHBhc3NwaHJhc2UgYW5kIHdyaXRpbmcgYSBrZXkgYnVuZGxlIGZpbGUgdGhhdCBhIEhvbG9jaGFpbiBDb25kdWN0b3IKY2FuIHJlYWQgd2hlbiBzdGFydGluZyB1cCBhbiBpbnN0YW5jZS4KCiMjIENvbnRyaWJ1dGUKSG9sb2NoYWluIGlzIGFuIG9wZW4gc291cmNlIHByb2plY3QuICBXZSB3ZWxjb21lIGFsbCBzb3J0cyBvZiBwYXJ0aWNpcGF0aW9uIGFuZCBhcmUgYWN0aXZlbHkgd29ya2luZyBvbiBpbmNyZWFzaW5nIHN1cmZhY2UgYXJlYSB0byBhY2NlcHQgaXQuICBQbGVhc2Ugc2VlIG91ciBbY29udHJpYnV0aW5nIGd1aWRlbGluZXNdKC4uL0NPTlRSSUJVVElORy5tZCkgZm9yIG91ciBnZW5lcmFsIHByYWN0aWNlcyBhbmQgcHJvdG9jb2xzIG9uIHBhcnRpY2lwYXRpbmcgaW4gdGhlIGNvbW11bml0eS4KCiMjIExpY2Vuc2UKWyFbTGljZW5zZTogR1BMIHYzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL0xpY2Vuc2UtR1BMJTIwdjMtYmx1ZS5zdmcpXShodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMCkKCkNvcHlyaWdodCAoQykgMjAxOCwgSG9sb2NoYWluIEZvdW5kYXRpb24KClRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgbGljZW5zZSBwCnJvdmlkZWQgaW4gdGhlIExJQ0VOU0UgZmlsZSAoR1BMdjMpLiAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1CnQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSCiBQVVJQT1NFLgoKKipOb3RlOioqIFdlIGFyZSBjb25zaWRlcmluZyBvdGhlciAnbG9vc2VyJyBsaWNlbnNpbmcgb3B0aW9ucyAobGlrZSBNSVQgbGljZW5zZSkgYnV0IGF0IHRoaXMgc3RhZ2UgYXJlIHVzaW5nIEdQTCB3aGlsZSB3ZSdyZSBnZXR0aW5nIHRoZSBtYXR0ZXIgc29ydGVkIG91dC4gIFNlZSBbdGhpcyBhcnRpY2xlXShodHRwczovL21lZGl1bS5jb20vaG9sb2NoYWluL2xpY2Vuc2luZy1uZWVkcy1mb3ItdHJ1bHktcDJwLXNvZnR3YXJlLWEzZTBmYTQyYmU2YykgZm9yIHNvbWUgb2Ygb3VyIHRoaW5raW5nIG9uIGxpY2Vuc2luZyBmb3IgZGlzdHJpYnV0ZWQgYXBwbGljYXRpb24gZnJhbWV3b3Jrcy4K",
  "default.nix": "eyBwa2dzLCBjb25maWcgfToKewogYnVpbGRJbnB1dHMgPSBbXQogKysgKHBrZ3MuY2FsbFBhY2thZ2UgLi9pbnN0YWxsIHsgfSkuYnVpbGRJbnB1dHMKICsrIChwa2dzLmNhbGxQYWNrYWdlIC4vcmVsZWFzZSB7CiAgcGtncyA9IHBrZ3M7CiAgY29uZmlnID0gY29uZmlnOwogfSkuYnVpbGRJbnB1dHMKICsrIChwa2dzLmNhbGxQYWNrYWdlIC4vdGVzdCB7IH0pLmJ1aWxkSW5wdXRzCiArKyAocGtncy5jYWxsUGFja2FnZSAuL3VuaW5zdGFsbCB7IH0pLmJ1aWxkSW5wdXRzCiA7Cn0K",
  "test": {},
  "LICENSE": "",
  "src": {
    "cli": {
      "ops-scaffold": {},
      "js-tests-scaffold": {
        "devDependencies": {},
        "dependencies": {
          "@holochain/try-o-rama": "^0.1.2-beta.2",
          "faucet": "0.0.1",
          "json3": "*",
          "sleep": "^6.1.0",
          "tape": "^4.9.1"
        },
        "index.js": "Ly8vIE5COiBUaGUgdHJ5LW8tcmFtYSBjb25maWcgcGF0dGVybnMgYXJlIHN0aWxsIG5vdCBxdWl0ZSBzdGFiaWxpemVkLgovLy8gU2VlIHRoZSB0cnktby1yYW1hIFJFQURNRSBbaHR0cHM6Ly9naXRodWIuY29tL2hvbG9jaGFpbi90cnktby1yYW1hXQovLy8gZm9yIGEgcG90ZW50aWFsbHkgbW9yZSBhY2N1cmF0ZSBleGFtcGxlCgpjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpCmNvbnN0IHRhcGUgPSByZXF1aXJlKCd0YXBlJykKCmNvbnN0IHsgT3JjaGVzdHJhdG9yLCBDb25maWcsIHRhcGVFeGVjdXRvciwgc2luZ2xlQ29uZHVjdG9yLCBjb21iaW5lICB9ID0gcmVxdWlyZSgnQGhvbG9jaGFpbi90cnktby1yYW1hJykKCnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIGVycm9yID0+IHsKICAvLyBXaWxsIHByaW50ICJ1bmhhbmRsZWRSZWplY3Rpb24gZXJyIGlzIG5vdCBkZWZpbmVkIgogIGNvbnNvbGUuZXJyb3IoJ2dvdCB1bmhhbmRsZWRSZWplY3Rpb246JywgZXJyb3IpOwp9KTsKCmNvbnN0IGRuYVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAiLi4vZGlzdC88PEROQV9OQU1FPj4uZG5hLmpzb24iKQoKY29uc3Qgb3JjaGVzdHJhdG9yID0gbmV3IE9yY2hlc3RyYXRvcih7CiAgbWlkZGxld2FyZTogY29tYmluZSgKICAgIC8vIHNxdWFzaCBhbGwgaW5zdGFuY2VzIGZyb20gYWxsIGNvbmR1Y3RvcnMgZG93biBpbnRvIGEgc2luZ2xlIGNvbmR1Y3RvciwKICAgIC8vIGZvciBpbi1tZW1vcnkgdGVzdGluZyBwdXJwb3Nlcy4KICAgIC8vIFJlbW92ZSB0aGlzIG1pZGRsZXdhcmUgZm9yIG90aGVyICJyZWFsIiBuZXR3b3JrIHR5cGVzIHdoaWNoIGNhbiBhY3R1YWxseQogICAgLy8gc2VuZCBtZXNzYWdlcyBhY3Jvc3MgY29uZHVjdG9ycwogICAgc2luZ2xlQ29uZHVjdG9yLAoKICAgIC8vIHVzZSB0aGUgdGFwZSBoYXJuZXNzIHRvIHJ1biB0aGUgdGVzdHMsIGluamVjdHMgdGhlIHRhcGUgQVBJIGludG8gZWFjaCBzY2VuYXJpbwogICAgLy8gYXMgdGhlIHNlY29uZCBhcmd1bWVudAogICAgdGFwZUV4ZWN1dG9yKHJlcXVpcmUoJ3RhcGUnKSkKICApLAoKICBnbG9iYWxDb25maWc6IHsKICAgIGxvZ2dlcjogdHJ1ZSwKICAgIG5ldHdvcms6ICdtZW1vcnknLCAgLy8gbXVzdCB1c2Ugc2luZ2xlQ29uZHVjdG9yIG1pZGRsZXdhcmUgaWYgdXNpbmcgaW4tbWVtb3J5IG5ldHdvcmsKICB9LAoKICAvLyB0aGUgZm9sbG93aW5nIGFyZSBvcHRpb25hbDoKCiAgd2FpdGVyOiB7CiAgICBzb2Z0VGltZW91dDogNTAwMCwKICAgIGhhcmRUaW1lb3V0OiAxMDAwMCwKICB9LAp9KQoKY29uc3QgY29uZHVjdG9yQ29uZmlnID0gewogIGluc3RhbmNlczogewogICAgbXlJbnN0YW5jZU5hbWU6IENvbmZpZy5kbmEoZG5hUGF0aCwgJ3NjYWZmb2xkLXRlc3QnKQogIH0KfQoKb3JjaGVzdHJhdG9yLnJlZ2lzdGVyU2NlbmFyaW8oImRlc2NyaXB0aW9uIG9mIGV4YW1wbGUgdGVzdCIsIGFzeW5jIChzLCB0KSA9PiB7CgogIGNvbnN0IHthbGljZSwgYm9ifSA9IGF3YWl0IHMucGxheWVycyh7YWxpY2U6IGNvbmR1Y3RvckNvbmZpZywgYm9iOiBjb25kdWN0b3JDb25maWd9KQoKICAvLyBNYWtlIGEgY2FsbCB0byBhIFpvbWUgZnVuY3Rpb24KICAvLyBpbmRpY2F0aW5nIHRoZSBmdW5jdGlvbiwgYW5kIHBhc3NpbmcgaXQgYW4gaW5wdXQKICBjb25zdCBhZGRyID0gYXdhaXQgYWxpY2UuY2FsbCgibXlJbnN0YW5jZU5hbWUiLCAibXlfem9tZSIsICJjcmVhdGVfbXlfZW50cnkiLCB7ImVudHJ5IiA6IHsiY29udGVudCI6InNhbXBsZSBjb250ZW50In19KQoKICAvLyBXYWl0IGZvciBhbGwgbmV0d29yayBhY3Rpdml0eSB0bwogIGF3YWl0IHMuY29uc2lzdGVuY3koKQoKICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbGljZS5jYWxsKCJteUluc3RhbmNlTmFtZSIsICJteV96b21lIiwgImdldF9teV9lbnRyeSIsIHsiYWRkcmVzcyI6IGFkZHIuT2t9KQoKICAvLyBjaGVjayBmb3IgZXF1YWxpdHkgb2YgdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgcmVzdWx0cwogIHQuZGVlcEVxdWFsKHJlc3VsdCwgeyBPazogeyBBcHA6IFsgJ215X2VudHJ5JywgJ3siY29udGVudCI6InNhbXBsZSBjb250ZW50In0nIF0gfSB9KQp9KQoKb3JjaGVzdHJhdG9yLnJ1bigpCg=="
      },
      "generate.rs": "dXNlIGNyYXRlOjplcnJvcjo6RGVmYXVsdFJlc3VsdDsKdXNlIGZsYXRlMjo6cmVhZDo6R3pEZWNvZGVyOwp1c2UgZ2xvYjo6Z2xvYjsKdXNlIHN0ZDo6ewogICAgZnM6OntzZWxmLCBGaWxlfSwKICAgIGlvOjp7Y29weSwgcHJlbHVkZTo6Kn0sCiAgICBwYXRoOjpQYXRoQnVmLAp9Owp1c2UgdGFyOjpBcmNoaXZlOwp1c2UgdGVtcGZpbGU6OkJ1aWxkZXI7CnVzZSB0ZXJhOjp7Q29udGV4dCwgVGVyYX07Cgpjb25zdCBSVVNUX1RFTVBMQVRFX1RBUkJBTExfVVJMOiAmc3RyID0KICAgICJodHRwczovL2dpdGh1Yi5jb20vaG9sb2NoYWluL3J1c3Qtem9tZS10ZW1wbGF0ZS9hcmNoaXZlL21hc3Rlci50YXIuZ3oiOwpjb25zdCBSVVNUX1BST0NfVEVNUExBVEVfVEFSQkFMTF9VUkw6ICZzdHIgPQogICAgImh0dHBzOi8vZ2l0aHViLmNvbS9ob2xvY2hhaW4vcnVzdC1wcm9jLXpvbWUtdGVtcGxhdGUvYXJjaGl2ZS9tYXN0ZXIudGFyLmd6IjsKCmNvbnN0IEhPTE9DSEFJTl9WRVJTSU9OOiAmc3RyID0gZW52ISgiQ0FSR09fUEtHX1ZFUlNJT04iKTsKCnB1YiBmbiBnZW5lcmF0ZSh6b21lX3BhdGg6ICZQYXRoQnVmLCBzY2FmZm9sZDogJlN0cmluZykgLT4gRGVmYXVsdFJlc3VsdDwoKT4gewogICAgbGV0IHpvbWVfbmFtZSA9IHpvbWVfcGF0aAogICAgICAgIC5jb21wb25lbnRzKCkKICAgICAgICAubGFzdCgpCiAgICAgICAgLm9rX29yX2Vsc2UofHwgZm9ybWF0X2VyciEoIk5ldyB6b21lIHBhdGggbXVzdCBoYXZlIGEgdGFyZ2V0IGRpcmVjdG9yeSIpKT8KICAgICAgICAuYXNfb3Nfc3RyKCkKICAgICAgICAudG9fc3RyKCkKICAgICAgICAub2tfb3JfZWxzZSh8fCBmb3JtYXRfZXJyISgiWm9tZSBwYXRoIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyIpKT87CgogICAgLy8gbWF0Y2ggYWdhaW5zdCBhbGwgc3VwcG9ydGVkIHRlbXBsYXRlcwogICAgbGV0IHVybCA9IG1hdGNoIHNjYWZmb2xkLmFzX3JlZigpIHsKICAgICAgICAicnVzdCIgPT4gUlVTVF9URU1QTEFURV9UQVJCQUxMX1VSTCwKICAgICAgICAicnVzdC1wcm9jIiA9PiBSVVNUX1BST0NfVEVNUExBVEVfVEFSQkFMTF9VUkwsCiAgICAgICAgXyA9PiBzY2FmZm9sZCwgLy8gaWYgbm90IGEga25vd24gdHlwZSBhc3N1bWUgdGhhdCBhIHJlcG8gdXJsIHdhcyBwYXNzZWQKICAgIH07CgogICAgcHJpbnRsbiEoImRvd25sb2FkaW5nIGFuZCBleHRyYWN0aW5nIHRhcmJhbGwgZnJvbToge30iLCB1cmwpOwoKICAgIC8vIGh0dHBzOi8vcnVzdC1sYW5nLW51cnNlcnkuZ2l0aHViLmlvL3J1c3QtY29va2Jvb2svd2ViL2NsaWVudHMvZG93bmxvYWQuaHRtbAogICAgbGV0IHRtcF9kaXIgPSBCdWlsZGVyOjpuZXcoKS5wcmVmaXgoImhjLWdlbmVyYXRlIikudGVtcGRpcigpPzsKICAgIGxldCBtdXQgcmVzcG9uc2UgPSByZXF3ZXN0OjpnZXQodXJsKT87CgogICAgbGV0IGZuYW1lID0gcmVzcG9uc2UKICAgICAgICAudXJsKCkKICAgICAgICAucGF0aF9zZWdtZW50cygpCiAgICAgICAgLmFuZF90aGVuKHxzZWdtZW50c3wgc2VnbWVudHMubGFzdCgpKQogICAgICAgIC5hbmRfdGhlbih8bmFtZXwgaWYgbmFtZS5pc19lbXB0eSgpIHsgTm9uZSB9IGVsc2UgeyBTb21lKG5hbWUpIH0pCiAgICAgICAgLnVud3JhcF9vcigidG1wLmJpbiIpOwoKICAgIGxldCBmbmFtZSA9IHRtcF9kaXIucGF0aCgpLmpvaW4oZm5hbWUpOwogICAgbGV0IG11dCBkZXN0ID0gRmlsZTo6Y3JlYXRlKCZmbmFtZSk/OwogICAgY29weSgmbXV0IHJlc3BvbnNlLCAmbXV0IGRlc3QpPzsKCiAgICAvLyBodHRwczovL3J1c3QtbGFuZy1udXJzZXJ5LmdpdGh1Yi5pby9ydXN0LWNvb2tib29rL2NvbXByZXNzaW9uL3Rhci5odG1sCiAgICBsZXQgdGFyX2d6ID0gRmlsZTo6b3BlbihmbmFtZSk/OwogICAgbGV0IHRhciA9IEd6RGVjb2Rlcjo6bmV3KHRhcl9neik7CiAgICBsZXQgbXV0IGFyY2hpdmUgPSBBcmNoaXZlOjpuZXcodGFyKTsKICAgIGFyY2hpdmUKICAgICAgICAuZW50cmllcygpPwogICAgICAgIC5maWx0ZXJfbWFwKHxlfCBlLm9rKCkpCiAgICAgICAgLm1hcCh8bXV0IGVudHJ5fCAtPiBEZWZhdWx0UmVzdWx0PFBhdGhCdWY+IHsKICAgICAgICAgICAgbGV0IHBhdGggPSB6b21lX3BhdGguam9pbigKICAgICAgICAgICAgICAgIGVudHJ5CiAgICAgICAgICAgICAgICAgICAgLnBhdGgoKT8KICAgICAgICAgICAgICAgICAgICAuc3RyaXBfcHJlZml4KGVudHJ5LnBhdGgoKT8uY29tcG9uZW50cygpLm50aCgwKS51bndyYXAoKSk/CiAgICAgICAgICAgICAgICAgICAgLnRvX293bmVkKCksCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGVudHJ5LnVucGFjaygmcGF0aCk/OwogICAgICAgICAgICBPayhwYXRoKQogICAgICAgIH0pCiAgICAgICAgLmZpbHRlcl9tYXAofGV8IGUub2soKSkKICAgICAgICAuZm9yX2VhY2gofHh8IHByaW50bG4hKCI+IHt9IiwgeC5kaXNwbGF5KCkpKTsKCiAgICBsZXQgbXV0IGNvbnRleHQgPSBDb250ZXh0OjpuZXcoKTsKICAgIGNvbnRleHQuaW5zZXJ0KCJuYW1lIiwgJnpvbWVfbmFtZSk7CiAgICBjb250ZXh0Lmluc2VydCgiYXV0aG9yIiwgJiJoYy1zY2FmZm9sZC1mcmFtZXdvcmsiKTsKICAgIGNvbnRleHQuaW5zZXJ0KCJ2ZXJzaW9uIiwgSE9MT0NIQUlOX1ZFUlNJT04pOwoKICAgIGFwcGx5X3RlbXBsYXRlX3N1YnN0aXR1dGlvbih6b21lX3BhdGgsIGNvbnRleHQpPzsKCiAgICBPaygoKSkKfQoKZm4gYXBwbHlfdGVtcGxhdGVfc3Vic3RpdHV0aW9uKHJvb3RfcGF0aDogJlBhdGhCdWYsIGNvbnRleHQ6IENvbnRleHQpIC0+IERlZmF1bHRSZXN1bHQ8KCk+IHsKICAgIGxldCB6b21lX25hbWVfY29tcG9uZW50ID0gcm9vdF9wYXRoCiAgICAgICAgLmNvbXBvbmVudHMoKQogICAgICAgIC5sYXN0KCkKICAgICAgICAub2tfb3JfZWxzZSh8fCBmb3JtYXRfZXJyISgiTmV3IHpvbWUgcGF0aCBtdXN0IGhhdmUgYSB0YXJnZXQgZGlyZWN0b3J5IikpPzsKICAgIGxldCB0ZW1wbGF0ZV9nbG9iX3BhdGg6IFBhdGhCdWYgPSBbcm9vdF9wYXRoLCAmUGF0aEJ1Zjo6ZnJvbSgiKiovKiIpXS5pdGVyKCkuY29sbGVjdCgpOwogICAgbGV0IHRlbXBsYXRlX2dsb2IgPSB0ZW1wbGF0ZV9nbG9iX3BhdGgKICAgICAgICAudG9fc3RyKCkKICAgICAgICAub2tfb3JfZWxzZSh8fCBmb3JtYXRfZXJyISgiWm9tZSBwYXRoIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyIpKT87CgogICAgbGV0IHRlbXBsYXRlciA9CiAgICAgICAgVGVyYTo6bmV3KHRlbXBsYXRlX2dsb2IpLm1hcF9lcnIofF98IGZvcm1hdF9lcnIhKCJDb3VsZCBub3QgbG9hZCByZXBvIGZvciB0ZW1wbGF0aW5nIikpPzsKCiAgICBmb3IgZW50cnkgaW4gZ2xvYih0ZW1wbGF0ZV9nbG9iKS5tYXBfZXJyKHxffCBmb3JtYXRfZXJyISgiRmFpbGVkIHRvIHJlYWQgZ2xvYiBwYXR0ZXJuIikpPyB7CiAgICAgICAgbWF0Y2ggZW50cnkgewogICAgICAgICAgICBPayhwYXRoKSA9PiB7CiAgICAgICAgICAgICAgICBpZiBwYXRoLmlzX2ZpbGUoKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBsYXRlX2lkOiBQYXRoQnVmID0gcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAuY29tcG9uZW50cygpCiAgICAgICAgICAgICAgICAgICAgICAgIC5za2lwX3doaWxlKHxjfCBjICE9ICZ6b21lX25hbWVfY29tcG9uZW50KQogICAgICAgICAgICAgICAgICAgICAgICAuc2tpcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAuY29sbGVjdCgpOwogICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB0ZW1wbGF0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgLnJlbmRlcih0ZW1wbGF0ZV9pZC50b19zdHIoKS51bndyYXAoKSwgJmNvbnRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgIC51bndyYXAoKTsKICAgICAgICAgICAgICAgICAgICBsZXQgbXV0IGZpbGUgPSBmczo6T3Blbk9wdGlvbnM6Om5ldygpCiAgICAgICAgICAgICAgICAgICAgICAgIC53cml0ZSh0cnVlKQogICAgICAgICAgICAgICAgICAgICAgICAudHJ1bmNhdGUodHJ1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgLm9wZW4ocGF0aCk/OwogICAgICAgICAgICAgICAgICAgIGZpbGUud3JpdGVfYWxsKHJlc3VsdC5hc19ieXRlcygpKT87CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRXJyKGUpID0+IHByaW50bG4hKCJ7Oj99IiwgZSksCiAgICAgICAgfQogICAgfQogICAgT2soKCkpCn0KCiNbY2ZnKHRlc3QpXQovLyB0b28gc2xvdyEKI1tjZmcoZmVhdHVyZSA9ICJicm9rZW4tdGVzdHMiKV0KbW9kIHRlc3RzIHsKICAgIHVzZSBhc3NlcnRfY21kOjpwcmVsdWRlOjoqOwogICAgdXNlIHN0ZDo6cHJvY2Vzczo6Q29tbWFuZDsKICAgIHVzZSB0ZW1wZmlsZTo6e0J1aWxkZXIsIFRlbXBEaXJ9OwoKICAgIGNvbnN0IEhPTE9DSEFJTl9URVNUX1BSRUZJWDogJnN0ciA9ICJvcmcuaG9sb2NoYWluLnRlc3QiOwoKICAgIGZuIGdlbl9kaXIoKSAtPiBUZW1wRGlyIHsKICAgICAgICBCdWlsZGVyOjpuZXcoKQogICAgICAgICAgICAucHJlZml4KEhPTE9DSEFJTl9URVNUX1BSRUZJWCkKICAgICAgICAgICAgLnRlbXBkaXIoKQogICAgICAgICAgICAudW53cmFwKCkKICAgIH0KCiAgICAjW3Rlc3RdCiAgICBmbiBjYW5fZ2VuZXJhdGVfc2NhZmZvbGRzKCkgewogICAgICAgIGxldCB0bXAgPSBnZW5fZGlyKCk7CgogICAgICAgIENvbW1hbmQ6Om1haW5fYmluYXJ5KCkKICAgICAgICAgICAgLnVud3JhcCgpCiAgICAgICAgICAgIC5jdXJyZW50X2RpcigmdG1wLnBhdGgoKSkKICAgICAgICAgICAgLmFyZ3MoJlsiaW5pdCIsICIuIl0pCiAgICAgICAgICAgIC5hc3NlcnQoKQogICAgICAgICAgICAuc3VjY2VzcygpOwoKICAgICAgICBDb21tYW5kOjptYWluX2JpbmFyeSgpCiAgICAgICAgICAgIC51bndyYXAoKQogICAgICAgICAgICAuY3VycmVudF9kaXIoJnRtcC5wYXRoKCkpCiAgICAgICAgICAgIC5hcmdzKCZbImciLCAiem9tZXMvYnViYmxlY2hhdCIsICJydXN0Il0pCiAgICAgICAgICAgIC5hc3NlcnQoKQogICAgICAgICAgICAuc3VjY2VzcygpOwoKICAgICAgICAvLyBUT0RPOiBXZSBjYW5ub3QgdGVzdCB0aGlzIHNpbmNlIHRoZXJlIGlzIG5vIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGhkay1hc3NlbWJseXNjcmlwdAogICAgICAgIC8vIENvbW1hbmQ6Om1haW5fYmluYXJ5KCkKICAgICAgICAvLyAgLnVud3JhcCgpCiAgICAgICAgLy8gICAuY3VycmVudF9kaXIoJnRtcC5wYXRoKCkpCiAgICAgICAgLy8gICAuYXJncygmWyJnIiwgInpvbWVzL3p1YmJsZWJhdCIsICJhc3NlbWJseXNjcmlwdCJdKQogICAgICAgIC8vICAgLmFzc2VydCgpCiAgICAgICAgLy8gICAuc3VjY2VzcygpOwogICAgfQp9Cg==",
      "scaffold": {
        "rust": {},
        "mod.rs": "cHViIG1vZCBhc3NlbWJseXNjcmlwdDsKcHViIG1vZCBydXN0OwoKdXNlIGNyYXRlOjplcnJvcjo6RGVmYXVsdFJlc3VsdDsKdXNlIHN0ZDo6cGF0aDo6UGF0aDsKCnB1YiB0cmFpdCBTY2FmZm9sZCB7CiAgICBmbiBnZW48UDogQXNSZWY8UGF0aD4+KCZzZWxmLCBiYXNlX3BhdGg6IFApIC0+IERlZmF1bHRSZXN1bHQ8KCk+Owp9Cg==",
        "rust.rs": "",
        "rust-proc-macro": {},
        "assemblyscript": {
          "extends": "./node_modules/assemblyscript/std/assembly.json",
          "include": [
            "./**/*.ts"
          ],
          "index-ts-starter.ts": "aW1wb3J0IHsKICAgIGRlYnVnLAogICAgY29tbWl0X2VudHJ5LAogICAgZ2V0X2VudHJ5LAogICAgc2VyaWFsaXplLAogICAgZGVzZXJpYWxpemUsCiAgICBzdHJpbmdpZnkKfSBmcm9tICIuL25vZGVfbW9kdWxlcy9oZGstYXNzZW1ibHlzY3JpcHQiCgovKgoKVGhlcmUgYXJlIGRlY29yYXRvcnMgYXZhaWxhYmxlIHRvIHNpbXBsaWZ5IGRldmVsb3BtZW50LgoKWW91IGNhbiBkZWxldGUgdGhlIGZvbGxvd2luZyBleGFtcGxlcywgb3IgbW9kaWZ5IHRoZW0gdG8gZ2V0IHN0YXJ0ZWQuCgpUaGUgY2FuX3N0cmluZ2lmeSBkZWNvcmF0b3IgZW5hYmxlcyBhbiBvYmplY3Qgb2YgYSBwYXJ0aWN1bGFyIGNsYXNzIHRvIGJlIGNvbnZlcnRlZCB0byBhIHN0cmluZyBieSBjYWxsaW5nIC50b1N0cmluZygpIG9uIGl0LgpJdCBhbHNvIGVuYWJsZXMgZGVidWcgYW5kIGNvbW1pdF9lbnRyeSB0byBpbXBsaWNpdGx5IGNvbnZlcnQgcGFyYW1ldGVycyBvZiB0aGlzIHR5cGUgaW50byBzdHJpbmdzLgoqLwoKQGNhbl9zdHJpbmdpZnkKY2xhc3MgVGVzdENsYXNzIHsKICAgIGtleTogc3RyaW5nCiAgICBvdGhlcktleTogaTMyCn0KCi8qClVzZSB0aGUgem9tZV9mdW5jdGlvbiBkZWNvcmF0b3IgdG8gZXhwb3NlIHRoaXMgZnVuY3Rpb24gYXMgYSB6b21lIGZ1bmN0aW9uLgpJdCBlbmFibGVzIGF1dG9tYXRpYyBzZXJpYWxpemF0aW9uL2Rlc2VyaWFsaXphdGlvbiBvZiBhcmd1bWVudHMgYW5kIHJldHVybiB2YWx1ZXMuCiovCgpAem9tZV9mdW5jdGlvbgpmdW5jdGlvbiB0ZXN0ZnVuY3Rpb24ocGFyYW0xOiBzdHJpbmcpOiBzdHJpbmcgewogICAgbGV0IG15VGVzdDogVGVzdENsYXNzID0gewogICAgICAgIGtleTogImhlbGxvIiwKICAgICAgICBvdGhlcktleTogMjMKICAgIH07CiAgICBkZWJ1ZyhteVRlc3QpOwogICAgcmV0dXJuICJzb21ldGhpbmciOwp9Cg=="
        },
        "assemblyscript.rs": "dXNlIGNyYXRlOjp7CiAgICBjbGk6OntwYWNrYWdlLCBzY2FmZm9sZDo6U2NhZmZvbGR9LAogICAgY29uZmlnX2ZpbGVzOjpCdWlsZCwKICAgIGVycm9yOjpEZWZhdWx0UmVzdWx0LAogICAgdXRpbCwKfTsKdXNlIHN0ZDo6ewogICAgZnM6OntzZWxmLCBPcGVuT3B0aW9uc30sCiAgICBpbzo6V3JpdGUsCiAgICBwYXRoOjpQYXRoLAp9OwoKcHViIGNvbnN0IFRTQ09ORklHX0ZJTEVfTkFNRTogJnN0ciA9ICJ0c2NvbmZpZy5qc29uIjsKcHViIGNvbnN0IFRZUEVTQ1JJUFRfRklMRV9OQU1FOiAmc3RyID0gImluZGV4LnRzIjsKCnB1YiBzdHJ1Y3QgQXNzZW1ibHlTY3JpcHRTY2FmZm9sZCB7CiAgICBidWlsZF90ZW1wbGF0ZTogQnVpbGQsCn0KCmltcGwgQXNzZW1ibHlTY3JpcHRTY2FmZm9sZCB7CiAgICBwdWIgZm4gbmV3KCkgLT4gQXNzZW1ibHlTY3JpcHRTY2FmZm9sZCB7CiAgICAgICAgQXNzZW1ibHlTY3JpcHRTY2FmZm9sZCB7CiAgICAgICAgICAgIGJ1aWxkX3RlbXBsYXRlOiBCdWlsZDo6d2l0aF9hcnRpZmFjdCgibW9kdWxlLndhc20iKS5jbWQoCiAgICAgICAgICAgICAgICAiLi9ub2RlX21vZHVsZXMvYXNzZW1ibHlzY3JpcHQvYmluL2FzYyIsCiAgICAgICAgICAgICAgICAmWwogICAgICAgICAgICAgICAgICAgICJpbmRleC50cyIsCiAgICAgICAgICAgICAgICAgICAgIi1iIiwKICAgICAgICAgICAgICAgICAgICAibW9kdWxlLndhc20iLAogICAgICAgICAgICAgICAgICAgICItLXRyYW5zZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgIi4vbm9kZV9tb2R1bGVzL2hkay1hc3NlbWJseXNjcmlwdC90cmFuc2Zvcm1zIiwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICksCiAgICAgICAgfQogICAgfQp9CgppbXBsIFNjYWZmb2xkIGZvciBBc3NlbWJseVNjcmlwdFNjYWZmb2xkIHsKICAgIGZuIGdlbjxQOiBBc1JlZjxQYXRoPj4oJnNlbGYsIGJhc2VfcGF0aDogUCkgLT4gRGVmYXVsdFJlc3VsdDwoKT4gewogICAgICAgIGZzOjpjcmVhdGVfZGlyX2FsbCgmYmFzZV9wYXRoKT87CgogICAgICAgIC8vIHVzZSBucG0gdG8gaW5pdGlhbGlzZSBhIG5vZGVqcyBwcm9qZWN0CiAgICAgICAgdXRpbDo6cnVuX2NtZCgKICAgICAgICAgICAgYmFzZV9wYXRoLmFzX3JlZigpLnRvX3BhdGhfYnVmKCksCiAgICAgICAgICAgICJucG0iLmludG8oKSwKICAgICAgICAgICAgJlsiaW5pdCIsICIteSJdLAogICAgICAgICk/OwoKICAgICAgICAvLyBhZGQgaGRrLWFzc2VtYmx5c2NyaXB0IGFzIGEgZGVwZW5kZW5jeQogICAgICAgIHV0aWw6OnJ1bl9jbWQoCiAgICAgICAgICAgIGJhc2VfcGF0aC5hc19yZWYoKS50b19wYXRoX2J1ZigpLAogICAgICAgICAgICAibnBtIi5pbnRvKCksCiAgICAgICAgICAgICZbImluc3RhbGwiLCAiLS1zYXZlIiwgImhvbG9jaGFpbi9oZGstYXNzZW1ibHlzY3JpcHQiXSwKICAgICAgICApPzsKCiAgICAgICAgLy8gY3JlYXRlIGEgaW5kZXgudHMgZmlsZQogICAgICAgIGxldCB0eXBlc2NyaXB0X2ZpbGVfcGF0aCA9IGJhc2VfcGF0aC5hc19yZWYoKS5qb2luKFRZUEVTQ1JJUFRfRklMRV9OQU1FKTsKCiAgICAgICAgbGV0IG11dCB0eXBlc2NyaXB0X2ZpbGUgPSBPcGVuT3B0aW9uczo6bmV3KCkKICAgICAgICAgICAgLndyaXRlKHRydWUpCiAgICAgICAgICAgIC5jcmVhdGUodHJ1ZSkKICAgICAgICAgICAgLm9wZW4odHlwZXNjcmlwdF9maWxlX3BhdGgpPzsKCiAgICAgICAgbGV0IGpzX3N0YXJ0ZXIgPSBpbmNsdWRlX3N0ciEoImFzc2VtYmx5c2NyaXB0L2luZGV4LXRzLXN0YXJ0ZXIudHMiKTsKCiAgICAgICAgdHlwZXNjcmlwdF9maWxlLndyaXRlX2FsbChqc19zdGFydGVyLmFzX2J5dGVzKCkpPzsKCiAgICAgICAgLy8gY3JlYXRlIGEgdHNjb25maWcuanNvbiBmaWxlCiAgICAgICAgbGV0IHRzY29uZmlnX2ZpbGVfcGF0aCA9IGJhc2VfcGF0aC5hc19yZWYoKS5qb2luKFRTQ09ORklHX0ZJTEVfTkFNRSk7CgogICAgICAgIGxldCBtdXQgdHNjb25maWdfZmlsZSA9IE9wZW5PcHRpb25zOjpuZXcoKQogICAgICAgICAgICAud3JpdGUodHJ1ZSkKICAgICAgICAgICAgLmNyZWF0ZSh0cnVlKQogICAgICAgICAgICAub3Blbih0c2NvbmZpZ19maWxlX3BhdGgpPzsKCiAgICAgICAgbGV0IHRzY29uZmlnX2pzb24gPSBpbmNsdWRlX3N0ciEoImFzc2VtYmx5c2NyaXB0L3RzY29uZmlnLmpzb24iKTsKCiAgICAgICAgdHNjb25maWdfZmlsZS53cml0ZV9hbGwodHNjb25maWdfanNvbi5hc19ieXRlcygpKT87CgogICAgICAgIC8vIGNyZWF0ZSBhbmQgZmlsbCBpbiBhIGJ1aWxkIGZpbGUgYXBwcm9wcmlhdGUgZm9yIEFzc2VtYmx5U2NyaXB0CiAgICAgICAgbGV0IGJ1aWxkX2ZpbGVfcGF0aCA9IGJhc2VfcGF0aC5hc19yZWYoKS5qb2luKHBhY2thZ2U6OkJVSUxEX0NPTkZJR19GSUxFX05BTUUpOwoKICAgICAgICBzZWxmLmJ1aWxkX3RlbXBsYXRlLnNhdmVfYXMoYnVpbGRfZmlsZV9wYXRoKT87CgogICAgICAgIE9rKCgpKQogICAgfQp9Cg=="
      },
      "run.rs": "",
      "git-scaffold": {},
      "hash_dna.rs": "dXNlIGVycm9yOjpEZWZhdWx0UmVzdWx0Owp1c2UgZmFpbHVyZTo6ZXJyX21zZzsKdXNlIGhvbG9jaGFpbl9jb25kdWN0b3JfbGliOjpjb25kdWN0b3I6OkNvbmR1Y3RvcjsKdXNlIGhvbG9jaGFpbl9wZXJzaXN0ZW5jZV9hcGk6OmNhczo6Y29udGVudDo6e0FkZHJlc3MsIEFkZHJlc3NhYmxlQ29udGVudH07CnVzZSBzZXJkZV9qc29uOjpNYXA7CnVzZSBzdGQ6OnBhdGg6OlBhdGhCdWY7CgpwdWIgZm4gaGFzaF9kbmEoCiAgICBkbmFfZmlsZV9wYXRoOiAmUGF0aEJ1ZiwKICAgIHByb3BlcnRpZXM6IE9wdGlvbjxWZWM8U3RyaW5nPj4sCikgLT4gRGVmYXVsdFJlc3VsdDxBZGRyZXNzPiB7CiAgICBsZXQgbXV0IGRuYSA9IENvbmR1Y3Rvcjo6bG9hZF9kbmEoZG5hX2ZpbGVfcGF0aCk/OwogICAgbGV0IG11dCBtYXAgPSBpZiBsZXQgc2VyZGVfanNvbjo6VmFsdWU6Ok9iamVjdChtYXApID0gZG5hLnByb3BlcnRpZXMgewogICAgICAgIG1hcC5jbG9uZSgpCiAgICB9IGVsc2UgewogICAgICAgIE1hcDo6bmV3KCkKICAgIH07CgogICAgaWYgbGV0IFNvbWUocHJvcGVydGllcykgPSBwcm9wZXJ0aWVzIHsKICAgICAgICBmb3IgcHJvcGVydHlfc3RyaW5nIGluIHByb3BlcnRpZXMgewogICAgICAgICAgICBsZXQgbXV0IHBhcnRzID0gcHJvcGVydHlfc3RyaW5nCiAgICAgICAgICAgICAgICAuc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgLm1hcChTdHJpbmc6OmZyb20pCiAgICAgICAgICAgICAgICAuY29sbGVjdDo6PFZlYzxTdHJpbmc+PigpOwogICAgICAgICAgICBpZiBwYXJ0cy5sZW4oKSAhPSAyIHsKICAgICAgICAgICAgICAgIHJldHVybiBFcnIoZXJyX21zZyhmb3JtYXQhKAogICAgICAgICAgICAgICAgICAgICJDYW4ndCBwYXJzZSBwcm9wZXJ0eToge30iLAogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5X3N0cmluZwogICAgICAgICAgICAgICAgKSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnRzLnBvcCgpLnVud3JhcCgpOwogICAgICAgICAgICBsZXQgbmFtZSA9IHBhcnRzLnBvcCgpLnVud3JhcCgpOwogICAgICAgICAgICBtYXAuaW5zZXJ0KG5hbWUsIHNlcmRlX2pzb246OlZhbHVlOjpTdHJpbmcodmFsdWUpKTsKICAgICAgICB9CiAgICB9CgogICAgZG5hLnByb3BlcnRpZXMgPSBzZXJkZV9qc29uOjpWYWx1ZTo6T2JqZWN0KG1hcCk7CiAgICBPayhkbmEuYWRkcmVzcygpKQp9Cg==",
      "package.rs": ""
    },
    "util.rs": "dXNlIGNyYXRlOjplcnJvcjo6RGVmYXVsdFJlc3VsdDsKdXNlIGNvbG9yZWQ6Oio7CnB1YiB1c2UgaG9sb2NoYWluX2NvbW1vbjo6cGF0aHM6OkROQV9FWFRFTlNJT047CnVzZSBzdGQ6OnsKICAgIGZzLAogICAgaW86OkVycm9yS2luZCwKICAgIHBhdGg6OlBhdGhCdWYsCiAgICBwcm9jZXNzOjp7Q29tbWFuZCwgU3RkaW99LAp9OwoKcHViIGZuIHJ1bl9jbWQoYmFzZV9wYXRoOiBQYXRoQnVmLCBiaW46IFN0cmluZywgYXJnczogJlsmc3RyXSkgLT4gRGVmYXVsdFJlc3VsdDwoKT4gewogICAgbGV0IHByZXR0eV9jb21tYW5kID0gZm9ybWF0ISgie30ge30iLCBiaW4uZ3JlZW4oKSwgYXJncy5qb2luKCIgIikuY3lhbigpKTsKCiAgICBwcmludGxuISgiPiB7fSIsIHByZXR0eV9jb21tYW5kKTsKCiAgICBsZXQgc3RhdHVzID0gQ29tbWFuZDo6bmV3KGJpbikKICAgICAgICAuYXJncyhhcmdzKQogICAgICAgIC5jdXJyZW50X2RpcihiYXNlX3BhdGgpCiAgICAgICAgLnN0YXR1cygpPzsKCiAgICBlbnN1cmUhKAogICAgICAgIHN0YXR1cy5zdWNjZXNzKCksCiAgICAgICAgImNvbW1hbmQge30gd2FzIG5vdCBzdWNjZXNzZnVsIiwKICAgICAgICBwcmV0dHlfY29tbWFuZAogICAgKTsKCiAgICBPaygoKSkKfQoKLy8vIEhlbHBlciBtZXRob2QgZm9yIGdldHRpbmcgdGhlIHN0YW5kYXJkIGRuYSBmaWxlIG5hbWUgYnVpbHQgZnJvbSB0aGUgZGlyZWN0b3J5IG5hbWUgYW5kIGV4dGVuc2lvbgpwdWIgZm4gc3RkX2RuYV9maWxlX25hbWUocGF0aDogJlBhdGhCdWYpIC0+IERlZmF1bHRSZXN1bHQ8U3RyaW5nPiB7CiAgICBsZXQgZGlyX25hbWUgPSBmaWxlX25hbWVfc3RyaW5nKHBhdGgpPzsKICAgIE9rKGZvcm1hdCEoInt9Lnt9IiwgZGlyX25hbWUsIEROQV9FWFRFTlNJT04pKQp9CgpwdWIgY29uc3QgRElTVF9ESVJfTkFNRTogJnN0ciA9ICJkaXN0IjsKCi8vLyBIZWxwZXIgbWV0aG9kIGZvciBvYnRhaW5pbmcgdGhlIHBhdGggdG8gdGhlIGRpc3QgZGlyZWN0b3J5LCBhbmQgY3JlYXRpbmcgaXQgaWYgaXQgZG9lc24ndCBleGlzdApwdWIgZm4gZ2V0X2Rpc3RfcGF0aChwYXRoOiAmUGF0aEJ1ZikgLT4gRGVmYXVsdFJlc3VsdDxQYXRoQnVmPiB7CiAgICAvLyBjcmVhdGUgZGlzdCBmb2xkZXIKICAgIGxldCBkaXN0X3BhdGggPSBwYXRoLmpvaW4oJkRJU1RfRElSX05BTUUpOwoKICAgIGlmICFkaXN0X3BhdGguZXhpc3RzKCkgewogICAgICAgIGZzOjpjcmVhdGVfZGlyKGRpc3RfcGF0aC5hc19wYXRoKCkpCiAgICAgICAgICAgIC5tYXBfZXJyKHxlfCBmb3JtYXRfZXJyISgiQ291bGRuJ3QgY3JlYXRlIHBhdGggezo/fTsge30iLCBkaXN0X3BhdGgsIGUpKT87CiAgICB9CiAgICBPayhkaXN0X3BhdGgpCn0KCnB1YiBmbiBzdGRfcGFja2FnZV9wYXRoKHBhdGg6ICZQYXRoQnVmKSAtPiBEZWZhdWx0UmVzdWx0PFBhdGhCdWY+IHsKICAgIE9rKGdldF9kaXN0X3BhdGgocGF0aCk/LmpvaW4oc3RkX2RuYV9maWxlX25hbWUocGF0aCk/KSkKfQoKLy8vIEhlbHBlciBtZXRob2QgZm9yIG9idGFpbmluZyB0aGUgZmlsZSBuYW1lIG9mIGEgcGF0aCBhcyBhIFN0cmluZwpwdWIgZm4gZmlsZV9uYW1lX3N0cmluZyhwYXRoOiAmUGF0aEJ1ZikgLT4gRGVmYXVsdFJlc3VsdDxTdHJpbmc+IHsKICAgIGxldCBmaWxlX25hbWUgPSBwYXRoCiAgICAgICAgLmZpbGVfbmFtZSgpCiAgICAgICAgLm9rX29yX2Vsc2UofHwgZm9ybWF0X2VyciEoInVuYWJsZSB0byByZXRyaWV2ZSBmaWxlIG5hbWUgZm9yIHBhdGg6IHs6P30iLCBwYXRoKSk/CiAgICAgICAgLnRvX3N0cigpCiAgICAgICAgLm9rX29yX2Vsc2UofHwgZm9ybWF0X2VyciEoInVuYWJsZSB0byBjb252ZXJ0IGZpbGUgbmFtZSB0byBzdHJpbmciKSk/OwoKICAgIE9rKGZpbGVfbmFtZS5pbnRvKCkpCn0KCi8vLyBIZWxwZXIgbWV0aG9kIGZvciBDTEkgY29tbWFuZHMgdGhhdCByZXF1aXJlIGNhcmdvIHRvIGJlIGluc3RhbGxlZAovLy8gVGFrZXMgaW4gZXh0cmEgY29udGV4dHVhbCBpbmZvIGFzIHN0cmluZ3MsIGFuZCByZXR1cm5zIGEgYm9vbAovLy8gd2hpY2ggc2hvdWxkIGluZGljYXRlIHdoZXRoZXIgdGhlIGNhbGxlciBzaG91bGQgY29udGludWUgd2l0aCBleGVjdXRpb24KLy8vIG9yIHBlcmZvcm0gYSBncmFjZWZ1bCBhbmQgZWFybHkgZXhpdApwdWIgZm4gY2hlY2tfZm9yX2NhcmdvKHVzZV9jYXNlOiAmc3RyLCBleHRyYV9oZWxwOiBPcHRpb248VmVjPCZzdHI+PikgLT4gRGVmYXVsdFJlc3VsdDxib29sPiB7CiAgICBtYXRjaCBDb21tYW5kOjpuZXcoImNhcmdvIikuc3Rkb3V0KFN0ZGlvOjpudWxsKCkpLnN0YXR1cygpIHsKICAgICAgICAvLyBubyBwcm9ibGVtcyBjaGVja2luZywgYW5kIGNhcmdvIGlzIGluc3RhbGxlZAogICAgICAgIE9rKF8pID0+IE9rKHRydWUpLAogICAgICAgIEVycihlKSA9PiB7CiAgICAgICAgICAgIG1hdGNoIGUua2luZCgpIHsKICAgICAgICAgICAgICAgIEVycm9yS2luZDo6Tm90Rm91bmQgPT4gewogICAgICAgICAgICAgICAgICAgIHByaW50bG4hKCJUaGlzIGNvbW1hbmQgcmVxdWlyZXMgdGhlIGBjYXJnb2AgY29tbWFuZCwgd2hpY2ggaXMgcGFydCBvZiB0aGUgUnVzdCB0b29sY2hhaW4uIik7CiAgICAgICAgICAgICAgICAgICAgcHJpbnRsbiEoInt9IiwgdXNlX2Nhc2UpOwogICAgICAgICAgICAgICAgICAgIHByaW50bG4hKCJJdCBpcyBpbXBvcnRhbnQgdGhhdCB5b3UgdXNlIHRoZSBjb3JyZWN0IHZlcnNpb24gb2YgYGNhcmdvYC4iKTsKICAgICAgICAgICAgICAgICAgICBwcmludGxuISgiV2UgcmVjb21tZW5kIHlvdSB3b3JrIGluc2lkZSBhIG5peC1zaGVsbCBvciB1c2Ugbml4LWVudiB0byBpbnN0YWxsIGBoY2AuIik7CiAgICAgICAgICAgICAgICAgICAgcHJpbnRsbiEoIkZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL2RvY3MuaG9sb2NoYWluLmxvdmUiKTsKICAgICAgICAgICAgICAgICAgICBtYXRjaCBleHRyYV9oZWxwIHsKICAgICAgICAgICAgICAgICAgICAgICAgU29tZShtZXNzYWdlcykgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIG1lc3NhZ2UgaW4gbWVzc2FnZXMgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50bG4hKCJ7fSIsIG1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIE5vbmUgPT4ge30KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHByaW50bG4hKCJIYXZpbmcgdGFrZW4gdGhvc2Ugc3RlcHMsIHJldHJ5IHRoaXMgY29tbWFuZC4iKTsKICAgICAgICAgICAgICAgICAgICAvLyBlYXJseSBleGl0IHdpdGggT2ssIGJ1dCBmYWxzZSAobWVhbmluZyBkb24ndCBjb250aW51ZSkgc2luY2UgdGhpcyBpcyB0aGUgZ3JhY2VmdWwgZXhpdAogICAgICAgICAgICAgICAgICAgIE9rKGZhbHNlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gY29udmVydCBmcm9tIGEgc3RkOjppbzo6RXJyb3IgaW50byBhIGZhaWx1cmU6OkVycm9yCiAgICAgICAgICAgICAgICAvLyBhbmQgYWN0dWFsbHkgcmV0dXJuIHRoYXQgZXJyb3Igc2luY2UgaXQncyBzb21ldGhpbmcKICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVudCB0aGFuIGp1c3Qgbm90IGZpbmRpbmcgYGNhcmdvYAogICAgICAgICAgICAgICAgXyA9PiBFcnIoZm9ybWF0X2VyciEoIlRoaXMgY29tbWFuZCByZXF1aXJlcyB0aGUgYGNhcmdvYCBjb21tYW5kLCBidXQgdGhlcmUgd2FzIGFuIGVycm9yIGNoZWNraW5nIGlmIGl0IGlzIGF2YWlsYWJsZSBvciBub3Q6IHt9IiwgZSkpLAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==",
    "config_files": {},
    "error.rs": "dXNlIGZhaWx1cmU6OkVycm9yOwoKI1tkZXJpdmUoRGVidWcsIEZhaWwpXQpwdWIgZW51bSBIb2xvY2hhaW5FcnJvciB7CiAgICAjW2ZhaWwoZGlzcGxheSA9ICJFcnJvcjoge30iLCBfMCldCiAgICBEZWZhdWx0KEVycm9yKSwKfQoKcHViIHR5cGUgRGVmYXVsdFJlc3VsdDxUPiA9IFJlc3VsdDxULCBFcnJvcj47CgpwdWIgdHlwZSBIb2xvY2hhaW5SZXN1bHQ8VD4gPSBSZXN1bHQ8VCwgSG9sb2NoYWluRXJyb3I+Owo="
  },
  "dist": {},
  "install": {},
  "Cargo.toml": "W3BhY2thZ2VdCm5hbWUgPSAiaGMiCmRlc2NyaXB0aW9uID0gImhvbG9jaGFpbiBhcHAgc2NhZmZvbGRpbmcgdG9vbHMiCmxpY2Vuc2UgPSAiR1BMLTMuMC1vbmx5Igpob21lcGFnZSA9ICJodHRwczovL2dpdGh1Yi5jb20vaG9sb2NoYWluL2hvbG9jaGFpbi1ydXN0Igpkb2N1bWVudGF0aW9uID0gImh0dHBzOi8vZ2l0aHViLmNvbS9ob2xvY2hhaW4vaG9sb2NoYWluLXJ1c3QiCnZlcnNpb24gPSAiMC4wLjM4LWFscGhhNiIKYXV0aG9ycyA9IFsiSG9sb2NoYWluIENvcmUgRGV2IFRlYW0gPGRldmNvcmVAaG9sb2NoYWluLm9yZz4iXQoKW2RlcGVuZGVuY2llc10KaG9sb2NoYWluX2NvcmVfdHlwZXMgPSB7IHZlcnNpb24gPSAiPTAuMC4zOC1hbHBoYTYiLCBwYXRoID0gIi4uL2NvcmVfdHlwZXMiIH0KaG9sb2NoYWluX2NvcmUgPSB7IHZlcnNpb24gPSAiPTAuMC4zOC1hbHBoYTYiLCBwYXRoID0gIi4uL2NvcmUiIH0KaG9sb2NoYWluX2NvbW1vbiA9IHsgdmVyc2lvbiA9ICI9MC4wLjM4LWFscGhhNiIsIHBhdGggPSAiLi4vY29tbW9uIiB9CmhvbG9jaGFpbl9jb25kdWN0b3JfbGliID0geyB2ZXJzaW9uID0gIj0wLjAuMzgtYWxwaGE2IiwgcGF0aCA9ICIuLi9jb25kdWN0b3JfbGliIiB9CmhvbG9jaGFpbl9kcGtpID0geyB2ZXJzaW9uID0gIj0wLjAuMzgtYWxwaGE2IiwgcGF0aCA9ICIuLi9kcGtpIiB9CmhvbG9jaGFpbl9sb2Nrc21pdGggPSB7IHZlcnNpb24gPSAiPTAuMC4zOC1hbHBoYTYiLCBwYXRoID0gIi4uL2xvY2tzbWl0aCIgfQpsaWIzaF9zb2RpdW0gPSAiPTAuMC4yMSIKaG9sb2NoYWluX2pzb25fYXBpID0gIj0wLjAuMTciCmhvbG9jaGFpbl9wZXJzaXN0ZW5jZV9hcGkgPSAiPTAuMC4xMCIKaG9sb2NoYWluX3BlcnNpc3RlbmNlX2ZpbGUgPSAiPTAuMC4xMCIKaG9sb2NoYWluX3dhc21fdXRpbHMgPSB7IHBhdGggPSAiLi4vd2FzbV91dGlscyIgfQpzdHJ1Y3RvcHQgPSAiPTAuMy4zIgpmYWlsdXJlID0gIj0wLjEuNSIKc2VyZGUgPSAiPTEuMC44OSIKc2VyZGVfZGVyaXZlID0gIj0xLjAuODkiCnNlcmRlX2pzb24gPSB7IHZlcnNpb24gPSAiPTEuMC4zOSIsIGZlYXR1cmVzID0gWyJwcmVzZXJ2ZV9vcmRlciJdIH0KdG9tbCA9ICI9MC41LjAiCnNlbXZlciA9IHsgdmVyc2lvbiA9ICIwLjkuMCIsIGZlYXR1cmVzID0gWyJzZXJkZSJdIH0KYmFzZTY0ID0gIj0wLjEwLjEiCmNvbG9yZWQgPSAiPTEuNy4wIgppZ25vcmUgPSAiPTAuNC42IgpycGFzc3dvcmQgPSAiPTIuMS4wIgp0ZXJhID0gIj0wLjExLjIwIgpnbG9iID0gIj0wLjMuMCIKcnVzdHlsaW5lID0gIj01LjAuMCIKanNvbi1wYXRjaCA9ICI9MC4yLjIiCnJlcXdlc3QgPSAiPTAuOS4xMSIKdGVtcGZpbGUgPSAiPTMuMC43Igp0YXIgPSAiPTAuNC4yNiIKZmxhdGUyID0gIj0xLjAuMTIiCgpbZGV2LWRlcGVuZGVuY2llc10KYXNzZXJ0X2NtZCA9ICI9MC4xMC4yIgo=",
  "uninstall": {},
  "properties": {}
}