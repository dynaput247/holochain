#![allow(warnings)]
use holochain_sodium::{kx, secbuf::SecBuf, sign, *};

use crate::{
    keypair::*,
    password_encryption::{self, EncryptedData, PwHashConfig},
    utils, SEED_SIZE,
};
use holochain_core_types::{
    agent::Base32,
    error::{HcResult, HolochainError},
};
use rustc_serialize::json;
use std::str;

use serde_derive::{Deserialize, Serialize};


/// Enum holding all the types of seeds that can generate cryptographic keys
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Eq)]
pub enum SeedType {
    /// Root / Master seed
    Root,
    /// Revocation seed
    Revocation,
    /// Device specific seed
    Device,
    /// Authorization seed?
    DevicePin,
    /// Application specific seed
    Application,
    /// Seed for a one use only key
    OneShot,
    /// Seed used only in tests or mocks
    Mock,
}

/// Struct holding all the keys generated by a seed
pub struct KeyBundle {
    pub sign_keys: SigningKeyPair,
    pub enc_keys: EncryptingKeyPair,
    pub seed_type: SeedType,
}

impl KeyBundle {
    /// Derive the keys from a 32 bytes seed buffer
    /// @param {SecBuf} seed - the seed buffer
    pub fn new_from_seed(seed: &mut SecBuf, seed_type: SeedType) -> Result<Self, HolochainError> {
        assert_eq!(seed.len(), SEED_SIZE);
        Ok(KeyBundle {
            sign_keys: SigningKeyPair::new_from_seed(seed)?,
            enc_keys: EncryptingKeyPair::new_from_seed(seed)?,
            seed_type,
        })
    }

    /// get the identifier key
    pub fn get_id(&self) -> Base32 {
        self.sign_keys.keypair.public.clone()
    }

    /// sign some arbitrary data with the signing private key
    /// @param {SecBuf} data - the data to sign
    /// @param {SecBuf} signature - Empty Buf to be filled with the signature
    pub fn sign(&mut self, data: &mut SecBuf, signature: &mut SecBuf) -> HcResult<()> {
        self.sign_keys.sign(data, signature)
    }

    /// verify data that was signed with our private signing key
    /// @param {SecBuf} data buffer to verify
    /// @param {SecBuf} signature candidate for that data buffer
    /// @return true if verification succeeded
    pub fn verify(&mut self, data: &mut SecBuf, signature: &mut SecBuf) -> bool {
        self.sign_keys.verify(data, signature)
    }

    ///
    pub fn is_same(&mut self, other: &mut KeyBundle) -> bool {
        self.sign_keys.keypair.is_same(&mut other.sign_keys.keypair)
            && self.enc_keys.keypair.is_same(&mut other.enc_keys.keypair)
            && self.seed_type == other.seed_type
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;
    use holochain_sodium::pwhash;

    pub(crate) const TEST_CONFIG: Option<PwHashConfig> = Some(PwHashConfig(
        pwhash::OPSLIMIT_INTERACTIVE,
        pwhash::MEMLIMIT_INTERACTIVE,
        pwhash::ALG_ARGON2ID13,
    ));

    pub(crate) fn test_generate_random_seed() -> SecBuf {
        let mut seed = SecBuf::with_insecure(SEED_SIZE);
        seed.randomize();
        seed
    }

    fn test_generate_random_bundle() -> KeyBundle {
        let mut seed = test_generate_random_seed();
        KeyBundle::new_from_seed(&mut seed, SeedType::Mock).unwrap()
    }

    #[test]
    fn it_should_create_keybundle_from_seed() {
        let bundle = test_generate_random_bundle();
        assert_eq!(SeedType::Mock, bundle.seed_type);
        assert_eq!(64, bundle.sign_keys.keypair.private.len());
        assert_eq!(32, bundle.enc_keys.keypair.private.len());

        let id = bundle.get_id();
        println!("id: {:?}", id);
        assert_ne!(0, id.len());
    }

    #[test]
    fn keybundle_should_sign_message_and_verify() {
        let mut bundle = test_generate_random_bundle();

        // Create random data
        let mut message = SecBuf::with_insecure(16);
        message.randomize();

        // sign it
        let mut signature = SigningKeyPair::create_secbuf();
        bundle.sign(&mut message, &mut signature).unwrap();
        // authentify signature
        let succeeded = bundle.verify(&mut message, &mut signature);
        assert!(succeeded);

        // Create random data
        let mut random_signature = SigningKeyPair::create_secbuf();
        random_signature.randomize();
        // authentify random signature
        let succeeded = bundle.verify(&mut message, &mut random_signature);
        assert!(!succeeded);

        // Randomize data again
        message.randomize();
        let succeeded = bundle.verify(&mut message, &mut signature);
        assert!(!succeeded);
    }
}
